// Generated by CoffeeScript 1.6.3
var FrameBuffer, dataSize, frameSize, nextFrameOffset, pluckFrame, unpackFrame, _;

_ = require('underscore');

frameSize = function(buffer, offset) {
  return 4 + dataSize(buffer, offset);
};

dataSize = function(buffer, offset) {
  if (offset + 4 <= buffer.length) {
    return buffer.readInt32BE(offset);
  }
};

nextFrameOffset = function(buffer, offset) {
  var nextFrame;
  if (offset == null) {
    offset = 0;
  }
  nextFrame = offset + frameSize(buffer, offset);
  if ((nextFrame != null) && nextFrame < buffer.length) {
    return nextFrame;
  } else {
    return null;
  }
};

unpackFrame = function(frame) {
  var frameId;
  frameId = frame.readInt32BE(4);
  return [frameId, frame.slice(8)];
};

pluckFrame = function(buffer, offset) {
  return unpackFrame(buffer.slice(offset, offset + frameSize(buffer, offset)));
};

FrameBuffer = (function() {
  function FrameBuffer() {}

  FrameBuffer.prototype.consume = function(raw) {
    var buffers;
    buffers = this.buffer != null ? [this.buffer, raw] : [raw];
    this.buffer = Buffer.concat(buffers);
    return this.parseFrames();
  };

  FrameBuffer.prototype.parseFrames = function() {
    var consumedOffset, frameOffsets, frames, lastOffset, offset;
    frameOffsets = [];
    offset = 0;
    while (!_.isNull(offset)) {
      frameOffsets.push(offset);
      offset = nextFrameOffset(this.buffer, offset);
    }
    frames = (function() {
      var _i, _len, _ref, _results;
      _ref = frameOffsets.slice(0, -1);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        offset = _ref[_i];
        _results.push(pluckFrame(this.buffer, offset));
      }
      return _results;
    }).call(this);
    consumedOffset = lastOffset = frameOffsets.pop();
    if (lastOffset + frameSize(this.buffer, lastOffset) <= this.buffer.length) {
      frames.push(pluckFrame(this.buffer, lastOffset));
      consumedOffset = lastOffset + frameSize(this.buffer, lastOffset);
    }
    this.buffer = this.buffer.slice(consumedOffset);
    if (this.buffer.length === 0) {
      this.buffer = null;
    }
    return frames;
  };

  return FrameBuffer;

})();

module.exports = FrameBuffer;
