// Generated by CoffeeScript 1.6.3
var EventEmitter, Writer, WriterNSQDConnection, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

_ = require('underscore');

WriterNSQDConnection = require('./nsqdconnection').WriterNSQDConnection;

/*
Publish messages to nsqds.

Usage:

w = new Writer '127.0.0.1', 4150
w.connect()

w.on Writer.READY, ->
  # Send a single message
  w.publish 'sample_topic', 'one'
  # Send multiple messages
  w.publish 'sample_topic', ['two', 'three']
w.on Writer.CLOSED, ->
  console.log 'Writer closed'
*/


Writer = (function(_super) {
  __extends(Writer, _super);

  Writer.READY = 'ready';

  Writer.CLOSED = 'closed';

  function Writer(nsqdHost, nsqdPort) {
    this.nsqdHost = nsqdHost;
    this.nsqdPort = nsqdPort;
  }

  Writer.prototype.connect = function() {
    var _this = this;
    this.conn = new WriterNSQDConnection(this.nsqdHost, this.nsqdPort, 30);
    this.conn.connect();
    this.conn.on(WriterNSQDConnection.READY, function() {
      return _this.emit(Writer.READY);
    });
    return this.conn.on(WriterNSQDConnection.CLOSED, function() {
      return _this.emit(Writer.CLOSED);
    });
  };

  /*
  Publish a message or a list of messages to the connected nsqd. The contents
  of the messages should either be strings or buffers with the payload encoded.

  Arguments:
    topic: A valid nsqd topic.
    msgs: A string, a buffer, or a list of string/buffers.
  */


  Writer.prototype.publish = function(topic, msgs) {
    if (this.conn == null) {
      this.emit('error', new Error("No active Writer connection to send messages."));
      return ;
    }
    if (!_.isArray(msgs)) {
      msgs = [msgs];
    }
    return this.conn.produceMessages(topic, msgs);
  };

  Writer.prototype.close = function() {
    return this.conn.destroy();
  };

  return Writer;

})(EventEmitter);

module.exports = Writer;
