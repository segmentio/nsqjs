// Generated by CoffeeScript 1.6.3
var StateChangeLogger, moment, _;

_ = require('underscore');

moment = require('moment');

StateChangeLogger = (function() {
  function StateChangeLogger(storeLogs, debug) {
    this.storeLogs = storeLogs != null ? storeLogs : false;
    this.debug = debug != null ? debug : false;
    this.logs = [];
  }

  StateChangeLogger.prototype.log = function(component, state, id, message) {
    var args;
    args = {
      timestamp: Date.now(),
      component: component,
      state: state,
      id: id,
      message: message
    };
    if (this.storeLogs) {
      this.logs.push(args);
    }
    if (this.debug) {
      return console.log(this.format(args));
    }
  };

  StateChangeLogger.prototype.format = function(logEntry) {
    var prefix, time, ts;
    ts = moment(logEntry.timestamp);
    time = ts.format('YYYY/MM/DD HH:mm:ss');
    if (logEntry.id != null) {
      prefix = "" + time + " " + logEntry.component + "(" + logEntry.id + ")";
    } else {
      prefix = "" + time + " " + logEntry.component;
    }
    if (logEntry.state != null) {
      return "" + prefix + " " + logEntry.state + ": " + logEntry.message;
    } else {
      return "" + prefix + ": " + logEntry.message;
    }
  };

  StateChangeLogger.prototype.print = function() {
    var entry, _i, _len, _ref, _results;
    _ref = this.logs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entry = _ref[_i];
      _results.push(console.log(this.format(entry)));
    }
    return _results;
  };

  return StateChangeLogger;

})();

module.exports = new StateChangeLogger();
